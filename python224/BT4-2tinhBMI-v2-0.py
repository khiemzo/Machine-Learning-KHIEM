import tkinter as tk
from tkinter import ttk, messagebox
import datetime
import time
import threading
import json
import os
import math
import random
import requests
from openai import OpenAI



# H√†m c·∫≠p nh·∫≠t th·ªùi gian th·ª±c tr√™n giao di·ªán
def update_time():
    while True:
        now = datetime.datetime.now().strftime("%H:%M:%S - %d/%m/%Y")
        time_label.config(text=f"üïí {now}")
        time.sleep(1)


# H√†m g·ªçi API ChatGPT tr√™n website c·ªßa b·∫°n ƒë·ªÉ l·∫•y l·ªãch tr√¨nh t·ªëi ∆∞u
def get_optimized_schedule(name, age, gender, occupation, weight, height, bmi):
    # X√¢y d·ª±ng prompt d·ª±a tr√™n th√¥ng tin c√° nh√¢n (ch·ªânh s·ª≠a payload cho ph√π h·ª£p v·ªõi API)
    prompt = (f"T·∫°o l·ªãch tr√¨nh t·ªëi ∆∞u cho {name} v·ªõi c√°c th√¥ng tin sau:\n"
              f"Tu·ªïi: {age}, Gi·ªõi t√≠nh: {gender}, Ngh·ªÅ nghi·ªáp: {occupation},\n"
              f"C√¢n n·∫∑ng: {weight}kg, Chi·ªÅu cao: {height}cm, BMI: {bmi:.2f}.\n"
              "Vui l√≤ng ƒë∆∞a ra l·ªãch tr√¨nh c√° nh√¢n h√≥a.")

    payload = {

            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 100,
            "temperature": 0.7


    }

    # L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (ho·∫∑c g√°n tr·ª±c ti·∫øp)
    api_key = ""  # Thay YOUR_API_KEY b·∫±ng key c·ªßa b·∫°n

    # Th√™m header v·ªõi ƒë·ªãnh d·∫°ng ƒë√∫ng
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(
            "https://api.openai.com/v1/completions",
            headers=headers,
            json=payload,
            timeout=10
        )
        if response.status_code == 200:
            data = response.json()
            if "choices" in data and len(data["choices"]) > 0:
                return data["choices"][0].get("text", "Kh√¥ng c√≥ l·ªãch tr√¨nh t·ªëi ∆∞u!")
            else:
                return "Kh√¥ng c√≥ l·ªãch tr√¨nh t·ªëi ∆∞u!"
        else:
            return f"L·ªói API: {response.status_code}"
    except Exception as e:
        return f"L·ªói khi g·ªçi API: {e}"


# H√†m x·ª≠ l√Ω t·∫°o l·ªãch tr√¨nh
def process_schedule():
    try:
        name = entry_name.get().strip()
        if not name:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n!")
            return
        age = int(entry_age.get())
        gender = gender_var.get()
        occupation = entry_occupation.get().strip()
        weight = float(entry_weight.get())
        height = float(entry_height.get())

        if age <= 0 or weight <= 0 or height <= 0:
            messagebox.showerror("L·ªói", "Gi√° tr·ªã tu·ªïi, c√¢n n·∫∑ng v√† chi·ªÅu cao ph·∫£i l·ªõn h∆°n 0!")
            return

        bmi = weight / ((height / 100) ** 2)
        bmi_text.set(f"BMI: {bmi:.2f}")

        # T·∫°o l·ªãch tr√¨nh c∆° b·∫£n (c√≥ th·ªÉ gi·ªØ l·∫°i c√°c g·ª£i √Ω ban ƒë·∫ßu n·∫øu c·∫ßn)
        basic_schedule = f"Ch·ªâ s·ªë BMI c·ªßa b·∫°n l√† {bmi:.2f}.\n"
        basic_schedule += "ƒêang t·∫°o l·ªãch tr√¨nh t·ªëi ∆∞u cho b·∫°n, vui l√≤ng ch·ªù..."
        schedule_text.config(state="normal")
        schedule_text.delete("1.0", tk.END)
        schedule_text.insert(tk.END, basic_schedule)
        schedule_text.config(state="disabled")

        # G·ªçi API ChatGPT tr√™n website (trong lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng l√†m treo giao di·ªán)
        def call_api():
            optimized_schedule = get_optimized_schedule(name, age, gender, occupation, weight, height, bmi)
            # C·∫≠p nh·∫≠t giao di·ªán v·ªõi l·ªãch tr√¨nh nh·∫≠n ƒë∆∞·ª£c
            schedule_text.config(state="normal")
            schedule_text.delete("1.0", tk.END)
            schedule_text.insert(tk.END, optimized_schedule)
            schedule_text.config(state="disabled")

        threading.Thread(target=call_api, daemon=True).start()

    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë√∫ng d·ªØ li·ªáu s·ªë cho tu·ªïi, c√¢n n·∫∑ng, chi·ªÅu cao!")


# Giao di·ªán Tkinter
root = tk.Tk()
root.title("AI Schedule Planner")
root.geometry("650x750")
root.configure(bg="#f8f9fa")

# Frame ti√™u ƒë·ªÅ
frame_title = tk.Frame(root, bg="#007BFF", pady=15)
frame_title.pack(fill="x")
tk.Label(frame_title, text="AI Schedule Planner", font=("Arial", 22, "bold"), fg="white", bg="#007BFF").pack()

# Hi·ªÉn th·ªã th·ªùi gian th·ª±c
time_label = tk.Label(root, text="", font=("Arial", 12, "bold"), fg="#007BFF", bg="#f8f9fa")
time_label.pack(pady=5)
threading.Thread(target=update_time, daemon=True).start()

# Frame nh·∫≠p d·ªØ li·ªáu
frame_input = tk.Frame(root, bg="#f8f9fa", padx=20, pady=20)
frame_input.pack(fill="both", expand=True)

# Nh·∫≠p t√™n
tk.Label(frame_input, text="T√™n:", font=("Arial", 12), bg="#f8f9fa").grid(row=0, column=0, sticky="w", pady=5, padx=10)
entry_name = tk.Entry(frame_input, font=("Arial", 12), width=30)
entry_name.grid(row=0, column=1, pady=5)

# Nh·∫≠p tu·ªïi
tk.Label(frame_input, text="Tu·ªïi:", font=("Arial", 12), bg="#f8f9fa").grid(row=1, column=0, sticky="w", pady=5, padx=10)
entry_age = tk.Entry(frame_input, font=("Arial", 12), width=30)
entry_age.grid(row=1, column=1, pady=5)

# Ch·ªçn gi·ªõi t√≠nh
tk.Label(frame_input, text="Gi·ªõi t√≠nh:", font=("Arial", 12), bg="#f8f9fa").grid(row=2, column=0, sticky="w", pady=5,
                                                                                padx=10)
gender_var = tk.StringVar(value="Nam")
ttk.Combobox(frame_input, textvariable=gender_var, values=["Nam", "N·ªØ"], state="readonly", width=28).grid(row=2,
                                                                                                          column=1,
                                                                                                          pady=5)

# Nh·∫≠p ngh·ªÅ nghi·ªáp
tk.Label(frame_input, text="Ngh·ªÅ nghi·ªáp:", font=("Arial", 12), bg="#f8f9fa").grid(row=3, column=0, sticky="w", pady=5,
                                                                                  padx=10)
entry_occupation = tk.Entry(frame_input, font=("Arial", 12), width=30)
entry_occupation.grid(row=3, column=1, pady=5)

# Nh·∫≠p c√¢n n·∫∑ng
tk.Label(frame_input, text="C√¢n n·∫∑ng (kg):", font=("Arial", 12), bg="#f8f9fa").grid(row=4, column=0, sticky="w", pady=5,
                                                                                    padx=10)
entry_weight = tk.Entry(frame_input, font=("Arial", 12), width=30)
entry_weight.grid(row=4, column=1, pady=5)

# Nh·∫≠p chi·ªÅu cao
tk.Label(frame_input, text="Chi·ªÅu cao (cm):", font=("Arial", 12), bg="#f8f9fa").grid(row=5, column=0, sticky="w",
                                                                                     pady=5, padx=10)
entry_height = tk.Entry(frame_input, font=("Arial", 12), width=30)
entry_height.grid(row=5, column=1, pady=5)

# N√∫t t·∫°o l·ªãch tr√¨nh
btn_generate = tk.Button(root, text="üìù T·∫°o l·ªãch tr√¨nh c√° nh√¢n", font=("Arial", 14, "bold"),
                         command=process_schedule, bg="#28a745", fg="white", width=25)
btn_generate.pack(pady=15)

# Hi·ªÉn th·ªã BMI
bmi_text = tk.StringVar()
bmi_label = tk.Label(root, textvariable=bmi_text, font=("Arial", 16, "bold"), fg="#28a745", bg="#f8f9fa")
bmi_label.pack()

# Text area hi·ªÉn th·ªã l·ªãch tr√¨nh t·ªëi ∆∞u
schedule_text = tk.Text(root, font=("Arial", 12), wrap="word", bg="white", relief="solid", bd=1, padx=10, pady=10)
schedule_text.pack(padx=20, pady=10, fill="both", expand=True)
schedule_text.config(state="disabled")


# N√∫t xem l·ªãch s·ª≠ (n·∫øu c·∫ßn)
def show_history():
    name = entry_name.get().strip()
    if not name:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n ƒë·ªÉ xem l·ªãch s·ª≠!")
        return
    history = load_history()
    records = history.get(name, [])
    history_win = tk.Toplevel(root)
    history_win.title(f"L·ªãch s·ª≠ ƒëo c·ªßa {name}")
    history_win.geometry("500x400")
    txt = tk.Text(history_win, font=("Arial", 11))
    txt.pack(expand=True, fill="both", padx=10, pady=10)
    if not records:
        txt.insert(tk.END, "Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠!")
    else:
        for rec in records:
            txt.insert(tk.END, f"Ng√†y: {rec['date']}\n")
            txt.insert(tk.END, f"Tu·ªïi: {rec['age']} | Ngh·ªÅ nghi·ªáp: {rec['occupation']}\n")
            txt.insert(tk.END, f"C√¢n n·∫∑ng: {rec['weight']} kg | Chi·ªÅu cao: {rec['height']} cm\n")
            txt.insert(tk.END, f"BMI: {rec['bmi']:.2f}\n")
            txt.insert(tk.END, "-" * 40 + "\n")
    txt.config(state="disabled")


btn_history = tk.Button(root, text="üìú Xem l·ªãch s·ª≠ ƒëo", font=("Arial", 12),
                        command=show_history, bg="#007BFF", fg="white", width=20)
btn_history.pack(pady=10)

# Ch·∫°y ·ª©ng d·ª•ng
root.mainloop()
